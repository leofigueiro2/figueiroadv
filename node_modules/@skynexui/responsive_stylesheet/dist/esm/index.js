/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/* eslint-disable no-unused-vars */
var Breakpoints;

(function (Breakpoints) {
  Breakpoints["xs"] = "xs";
  Breakpoints["sm"] = "sm";
  Breakpoints["md"] = "md";
  Breakpoints["lg"] = "lg";
  Breakpoints["xl"] = "xl";
})(Breakpoints || (Breakpoints = {}));

var breakpoints = {
  xl: 1200,
  lg: 992,
  md: 768,
  sm: 480,
  xs: 0
};

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function parseStyleSheetRule(property, value) {
  var _a, _b, _c;

  if (property.includes("crossAxisAlignment")) {
    // crossAxisAlignment?: alignItems;
    return {
      alignItems: value
    };
  }

  if (property.includes("mainAxisAlignment")) {
    // mainAxisAlignment?: justifyContent;
    return {
      justifyContent: value
    };
  }

  if (property.includes("Vertical")) {
    var propertyBase = property.replace("Vertical", "");
    return _a = {}, _a[propertyBase + "-top"] = value, _a[propertyBase + "-bottom"] = value, _a;
  }

  if (property.includes("Horizontal")) {
    var propertyBase = property.replace("Horizontal", "");
    return _b = {}, _b[propertyBase + "-left"] = value, _b[propertyBase + "-right"] = value, _b;
  }

  return _c = {}, _c[property] = value, _c;
}

function parseStyles(_a) {
  var mediaResultBy = _a.mediaResultBy,
      stateResultBy = _a.stateResultBy;
  return function (acc, _a) {
    var _b;

    var styleSheetKey = _a[0],
        styleSheetValue = _a[1];

    if (stateResultBy[styleSheetKey]) {
      var state = stateResultBy[styleSheetKey];
      var styleSheet = styleSheetValue;
      var output = Object.entries(styleSheet).reduce(parseStyles({
        mediaResultBy: mediaResultBy,
        stateResultBy: stateResultBy
      }), {});
      return __assign(__assign({}, acc), (_b = {}, _b[state] = output, _b));
    }

    if (typeof styleSheetValue === "string" || typeof styleSheetValue === "number") {
      var key = styleSheetKey;
      var value = styleSheetValue;
      return __assign(__assign({}, acc), parseStyleSheetRule(key, value));
    }

    if (_typeof(styleSheetValue) === "object") {
      return __assign(__assign({}, acc), Object.keys(mediaResultBy).reduce(function (mediaQuery, breakpoint) {
        var _a;

        var currentMediaQuery = mediaResultBy[breakpoint];
        var currentRuleValue = styleSheetValue[breakpoint];
        if (!currentRuleValue) return mediaQuery;
        var rule = parseStyleSheetRule(styleSheetKey, currentRuleValue);
        return __assign(__assign({}, mediaQuery), (_a = {}, _a[currentMediaQuery] = __assign(__assign({}, acc[currentMediaQuery]), rule), _a));
      }, {}));
    }

    return __assign({}, acc);
  };
}

function parseStyleSheet(styleSheet, uniqueId) {
  if (uniqueId === void 0) {
    uniqueId = "unique-id";
  }

  var mediaResultBy = {
    xs: "@media (min-width: " + breakpoints.xs + "px)",
    sm: "@media (min-width: " + breakpoints.sm + "px)",
    md: "@media (min-width: " + breakpoints.md + "px)",
    lg: "@media (min-width: " + breakpoints.lg + "px)",
    xl: "@media (min-width: " + breakpoints.xl + "px)"
  };
  var stateResultBy = {
    hover: "&:hover, body.dark &." + uniqueId + ":hover",
    focus: "&:focus, body.dark &." + uniqueId + ":focus",
    disabled: "&:disabled, body.dark &." + uniqueId + ":disabled",
    modeDark: "body.dark &." + uniqueId
  };
  var output = Object.entries(styleSheet).reduce(parseStyles({
    mediaResultBy: mediaResultBy,
    stateResultBy: stateResultBy
  }), {});
  return output;
}

export { Breakpoints, breakpoints, parseStyleSheet };
//# sourceMappingURL=index.js.map
